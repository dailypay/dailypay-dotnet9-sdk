//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DailyPay
{
    using DailyPay.Hooks;
    using DailyPay.Models.Components;
    using DailyPay.Models.Errors;
    using DailyPay.Models.Requests;
    using DailyPay.Utils;
    using DailyPay.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    /// <summary>
    /// # DailyPay API Access<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// ---<br/>
    /// <br/>
    /// DailyPay adheres to the <a href="https://datatracker.ietf.org/doc/html/rfc6749">OAuth 2.0 RFC 6749</a> and <a href="https://openid.net/specs/openid-connect-core-1_0.html">OpenID Connect</a> specifications. This document will walk you through the steps to get an _access token_ your application can use to make requests to the DailyPay Public REST API.<br/>
    /// <br/>
    /// We support the following methods:<br/>
    /// <br/>
    /// - <a href="https://www.rfc-editor.org/rfc/rfc6749#section-4.1">Authorization Code Flow</a>: This method is suitable when access to resources requires user consent, such as bank account information or the ability to initiate transfers on behalf of the user.<br/>
    /// <br/>
    ///   &gt; It allows your application to get `access` and `refresh` tokens, facilitating user consent and enabling your application to perform actions on their behalf.<br/>
    /// <br/>
    /// - <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.4">Client Credential Flow</a>: This method is suitable for server-to-server operations, where additional levels of user consent may not be required.<br/>
    ///   &gt; The client credentials grant facilitates the acquisition of an access token independent of a user&apos;s protected resources. For instance, you can utilize <a href="/tag/v3/Organizations#operation/readOrganization">the _Organizations_ endpoint</a>.<br/>
    /// <br/>
    /// # Authorization Code Flow<br/>
    /// <br/>
    /// The purpose of following the OAuth2 flow is to help you retrieve an authorization &lt;strong&gt;&lt;code&gt;code&lt;/code&gt;&lt;/strong&gt;<br/>
    /// and exchange it for an &lt;strong&gt;&lt;code&gt;access_token&lt;/code&gt;&lt;/strong&gt; via the &lt;a href=&quot;/tag/Authentication#operation/requestOauthAccessToken&quot;&gt;request access token&lt;/a&gt; endpoint.<br/>
    /// <br/>
    /// ## 1. Register your Application<br/>
    /// <br/>
    /// Your DailyPay contact will ask you to provide<br/>
    /// <br/>
    /// - a callback url that can receive the &lt;strong&gt;&lt;code&gt;code&lt;/code&gt;&lt;/strong&gt; result of the OAuth 2.0 authorization code flow<br/>
    /// - links to your privacy policy and terms of service<br/>
    /// - optionally, a logo for use on the OAuth consent screen<br/>
    /// <br/>
    /// &lt;details&gt;<br/>
    /// &lt;summary&gt;OpenID Connect (OIDC)&lt;/summary&gt;<br/>
    /// <br/>
    /// - For additional security, you may be asked to provide DailyPay with a JSON Web Key Set (JWKS) or url for retrieving your JWKS to utilize signed &lt;a href=&quot;https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests&quot;&gt;OIDC requests&lt;/a&gt;.&lt;/p&gt;<br/>
    /// &lt;/details&gt;<br/>
    /// <br/>
    /// ## 2. Configure<br/>
    /// <br/>
    /// &lt;p&gt;DailyPay will provide configuration values for your application:&lt;/p&gt;<br/>
    /// &lt;ul&gt;<br/>
    ///     &lt;li&gt;&lt;code&gt;client_id&lt;/code&gt;&lt;/li&gt;<br/>
    ///     &lt;li&gt;&lt;code&gt;client_secret&lt;/code&gt;, if applicable&lt;/li&gt;<br/>
    ///     &lt;li&gt;&lt;code&gt;scope&lt;/code&gt;a list of scopes your application can request, which may include &quot;offline_access&quot; and &quot;openid&quot;&lt;/li&gt;<br/>
    ///     &lt;li&gt;&lt;code&gt;redirect_uri&lt;/code&gt; the registered callback url you provided&lt;/li&gt;<br/>
    /// &lt;/ul&gt;<br/>
    /// <br/>
    /// You may wish to use a client library (https://oauth.net/code/) to perform the next steps, using the configuration values above.<br/>
    /// <br/>
    /// ## 3. Initiate an OAuth2 request<br/>
    /// <br/>
    /// Construct the request url using the template below, replacing the &lt;strong&gt;&lt;code&gt;{scope}&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;{client_id}&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;{redirect_uri}&lt;/code&gt;&lt;/strong&gt; parameters with the configuration values accordingly.<br/>
    /// <br/>
    /// Additionally, generate a &lt;strong&gt;&lt;code&gt;state&lt;/code&gt;&lt;/strong&gt; parameter for the specific request, and a code challenge and verifier (used in a later step) for &lt;a href=&quot;https://oauth.net/2/pkce/&quot;&gt;Proof Key Code Exchange&lt;/a&gt;.<br/>
    /// <br/>
    ///   &lt;pre&gt;&lt;code&gt;https://auth.dailypay.com/oauth2/auth<br/>
    ///     ?response_type=code<br/>
    ///     &amp;scope={scope}<br/>
    ///     &amp;client_id={client_id}<br/>
    ///     &amp;redirect_uri={redirect_uri}<br/>
    ///     &amp;state={state}<br/>
    ///     &amp;code_challenge={code_challenge}<br/>
    ///     &amp;code_challenge_method=S256<br/>
    ///   &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    ///   &lt;details&gt;<br/>
    ///   &lt;summary&gt;Example&lt;/summary&gt;<br/>
    ///   <br/>
    ///   &lt;pre&gt;&lt;code&gt;https://auth.dailypay.com/oauth2/auth<br/>
    ///     ?response_type=code<br/>
    ///     &amp;scope=user%3aread_write%20openid<br/>
    ///     &amp;client_id=your-client-id<br/>
    ///     &amp;redirect_uri=https%3A%2F%2Fexample.com%2Fcallback<br/>
    ///     &amp;state=9876543fghijklm<br/>
    ///     &amp;code_challenge=hKpKupTM391pE10xfQiorMxXarRKAHRhTfH_xkGf7U4<br/>
    ///     &amp;code_challenge_method=S256<br/>
    ///   &lt;/code&gt;&lt;/pre&gt;<br/>
    ///   <br/>
    ///   Make sure to url-encode each parameter e.g. &lt;code&gt;user:read_write&lt;/code&gt; becomes &lt;code&gt;user%3aread_write&lt;/code&gt;<br/>
    ///   &lt;/details&gt;<br/>
    ///   &lt;br&gt;<br/>
    /// <br/>
    /// ## 4. Open a browser window, tab, or secure mobile view to the constructed URL.<br/>
    /// <br/>
    /// The user will be prompted to log in or create a new DailyPay account and will be prompted to allow your application to act on their behalf.<br/>
    /// <br/>
    /// &lt;img src=&quot;https://s3.amazonaws.com/dp-devportal-images/pngs/OAuthAllowFlow.png&quot;&gt;<br/>
    /// <br/>
    /// ## 5. Handle the code<br/>
    /// <br/>
    /// Users will be redirected in the open tab to your callback url with a `code` query parameter,<br/>
    /// or an `error` and `error_description` if the user did not consent to your application&apos;s request or otherwise encountered an error.<br/>
    /// You will also be returned the `state` parameter.<br/>
    /// <br/>
    /// ## 6. Exchange the code for an Access Token<br/>
    /// <br/>
    /// As also specified in our <a href="Authentication#operation/requestToken">token endpoint documentation</a>,<br/>
    /// send the following parameters www-form-encoded in the request body to https://auth.dailypay.com/oauth2/token.<br/>
    /// <br/>
    /// &lt;table&gt;<br/>
    /// &lt;thead&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;th&gt;Parameter&lt;/th&gt;<br/>
    /// &lt;th&gt;Required&lt;/th&gt;<br/>
    /// &lt;th&gt;Description&lt;/th&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;/thead&gt;<br/>
    /// &lt;tbody&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;grant_type&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Must be set to &lt;code&gt;authorization_code&lt;/code&gt;.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;client_id&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Your client id provided by DailyPay.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;code&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;The authorization code received from the authorization server.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;redirect_uri&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;MUST be the redirection URI used in the initial authorization request.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;client_secret&lt;/td&gt;<br/>
    /// &lt;td&gt;Varies&lt;/td&gt;<br/>
    /// &lt;td&gt;Your client secret, if provided by DailyPay.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;code_verifier&lt;/td&gt;<br/>
    /// &lt;td&gt;Varies&lt;/td&gt;<br/>
    /// &lt;td&gt;The PKCE verifier matching the code_challenge generated earlier.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;/tbody&gt;<br/>
    /// &lt;/table&gt;<br/>
    /// <br/>
    /// Example Request to the Token Endpoint<br/>
    /// <br/>
    /// &lt;pre&gt;&lt;code&gt;curl --request POST \<br/>
    ///     --url https://auth.dailypay.com/oauth2/token \<br/>
    ///     --header &apos;accept: application/vnd.api+json&apos;<br/>
    ///     --header &apos;content-type: application/x-www-form-urlencoded&apos; \<br/>
    ///     --data &quot;grant_type=authorization_code&quot; \<br/>
    ///     --data &quot;client_id={client_id}&quot; \<br/>
    ///     --data &quot;code={code}&quot; \<br/>
    ///     --data &quot;redirect_uri={redirect_uri}&quot; \<br/>
    ///     --data &quot;code_verifier={verifier}&quot;<br/>
    /// &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    /// The resulting access token can be used to make requests to the DailyPay Public REST API:<br/>
    /// <br/>
    /// &lt;pre&gt;&lt;code&gt;{<br/>
    ///     &quot;access_token&quot;: &quot;dpo_38347Ae178B4a16C7e42F292c6912E7710c8&quot;,<br/>
    ///     &quot;token_type&quot;: &quot;bearer&quot;,<br/>
    ///     &quot;expires_in&quot;: 3600,<br/>
    ///     &quot;created_at&quot;: 1669741580<br/>
    /// }<br/>
    /// &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    /// &gt; The authorization code, access token, and refresh tokens can vary in size but will typically remain under 4096 btyes.<br/>
    /// <br/>
    /// # Client Credentials Flow<br/>
    /// <br/>
    /// As also specified in our <a href="Authentication#operation/requestToken">token endpoint documentation</a>,<br/>
    /// send the following parameters www-form-encoded in the request body to https://auth.dailypay.com/oauth2/token.<br/>
    /// <br/>
    /// &lt;table&gt;<br/>
    /// &lt;thead&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;th&gt;Parameter&lt;/th&gt;<br/>
    /// &lt;th&gt;Required&lt;/th&gt;<br/>
    /// &lt;th&gt;Description&lt;/th&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;/thead&gt;<br/>
    /// &lt;tbody&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;grant_type&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Must be set to &lt;code&gt;client_credentials&lt;/code&gt;.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;scope&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;The space-delimited list of requested scopes&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;client_id&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Your client id provided by DailyPay.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;client_secret&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Your client secret provided by DailyPay.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;/tbody&gt;<br/>
    /// &lt;/table&gt;<br/>
    /// <br/>
    /// Example Request to the Token Endpoint<br/>
    /// <br/>
    /// &lt;pre&gt;&lt;code&gt;curl --request POST \<br/>
    ///     --url https://auth.dailypay.com/oauth2/token \<br/>
    ///     --header &apos;accept: application/vnd.api+json&apos;<br/>
    ///     --header &apos;content-type: application/x-www-form-urlencoded&apos; \<br/>
    ///     --data &quot;grant_type=client_credentials&quot; \<br/>
    ///     --data &quot;scope={scopes}&quot; \<br/>
    ///     --data &quot;client_id={client_id}&quot; \<br/>
    ///     --data &quot;client_secret={client_secret}&quot;<br/>
    /// &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    /// The resulting access token can be used to make requests to the DailyPay Public REST API:<br/>
    /// <br/>
    /// &lt;pre&gt;&lt;code&gt;{<br/>
    ///     &quot;access_token&quot;: &quot;dpo_38347Ae178B4a16C7e42F292c6912E7710c8&quot;,<br/>
    ///     &quot;token_type&quot;: &quot;bearer&quot;,<br/>
    ///     &quot;expires_in&quot;: 3600,<br/>
    ///     &quot;created_at&quot;: 1669741580<br/>
    /// }<br/>
    /// &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    /// &gt; The authorization code, access token, and refresh tokens can vary in size but will typically remain under 4096 btyes.<br/>
    /// <br/>
    /// ---<br/>
    /// 
    /// </remarks>
    /// </summary>
    public interface IAuthentication
    {

        /// <summary>
        /// Request access token
        /// 
        /// <remarks>
        /// Request a Dailypay user access token, as described in the &lt;a href=&apos;https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3&apos;&gt;OAuth2 spec&lt;/a&gt;. When grant_type is authorization_code, the code and redirect_uri parameters are required. When grant_type is refresh_token, the refresh_token parameter is required.
        /// </remarks>
        /// </summary>
        Task<RequestTokenResponse> RequestTokenAsync(RequestTokenRequest request, string? serverUrl = null);
    }

    /// <summary>
    /// # DailyPay API Access<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// ---<br/>
    /// <br/>
    /// DailyPay adheres to the <a href="https://datatracker.ietf.org/doc/html/rfc6749">OAuth 2.0 RFC 6749</a> and <a href="https://openid.net/specs/openid-connect-core-1_0.html">OpenID Connect</a> specifications. This document will walk you through the steps to get an _access token_ your application can use to make requests to the DailyPay Public REST API.<br/>
    /// <br/>
    /// We support the following methods:<br/>
    /// <br/>
    /// - <a href="https://www.rfc-editor.org/rfc/rfc6749#section-4.1">Authorization Code Flow</a>: This method is suitable when access to resources requires user consent, such as bank account information or the ability to initiate transfers on behalf of the user.<br/>
    /// <br/>
    ///   &gt; It allows your application to get `access` and `refresh` tokens, facilitating user consent and enabling your application to perform actions on their behalf.<br/>
    /// <br/>
    /// - <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.4">Client Credential Flow</a>: This method is suitable for server-to-server operations, where additional levels of user consent may not be required.<br/>
    ///   &gt; The client credentials grant facilitates the acquisition of an access token independent of a user&apos;s protected resources. For instance, you can utilize <a href="/tag/v3/Organizations#operation/readOrganization">the _Organizations_ endpoint</a>.<br/>
    /// <br/>
    /// # Authorization Code Flow<br/>
    /// <br/>
    /// The purpose of following the OAuth2 flow is to help you retrieve an authorization &lt;strong&gt;&lt;code&gt;code&lt;/code&gt;&lt;/strong&gt;<br/>
    /// and exchange it for an &lt;strong&gt;&lt;code&gt;access_token&lt;/code&gt;&lt;/strong&gt; via the &lt;a href=&quot;/tag/Authentication#operation/requestOauthAccessToken&quot;&gt;request access token&lt;/a&gt; endpoint.<br/>
    /// <br/>
    /// ## 1. Register your Application<br/>
    /// <br/>
    /// Your DailyPay contact will ask you to provide<br/>
    /// <br/>
    /// - a callback url that can receive the &lt;strong&gt;&lt;code&gt;code&lt;/code&gt;&lt;/strong&gt; result of the OAuth 2.0 authorization code flow<br/>
    /// - links to your privacy policy and terms of service<br/>
    /// - optionally, a logo for use on the OAuth consent screen<br/>
    /// <br/>
    /// &lt;details&gt;<br/>
    /// &lt;summary&gt;OpenID Connect (OIDC)&lt;/summary&gt;<br/>
    /// <br/>
    /// - For additional security, you may be asked to provide DailyPay with a JSON Web Key Set (JWKS) or url for retrieving your JWKS to utilize signed &lt;a href=&quot;https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests&quot;&gt;OIDC requests&lt;/a&gt;.&lt;/p&gt;<br/>
    /// &lt;/details&gt;<br/>
    /// <br/>
    /// ## 2. Configure<br/>
    /// <br/>
    /// &lt;p&gt;DailyPay will provide configuration values for your application:&lt;/p&gt;<br/>
    /// &lt;ul&gt;<br/>
    ///     &lt;li&gt;&lt;code&gt;client_id&lt;/code&gt;&lt;/li&gt;<br/>
    ///     &lt;li&gt;&lt;code&gt;client_secret&lt;/code&gt;, if applicable&lt;/li&gt;<br/>
    ///     &lt;li&gt;&lt;code&gt;scope&lt;/code&gt;a list of scopes your application can request, which may include &quot;offline_access&quot; and &quot;openid&quot;&lt;/li&gt;<br/>
    ///     &lt;li&gt;&lt;code&gt;redirect_uri&lt;/code&gt; the registered callback url you provided&lt;/li&gt;<br/>
    /// &lt;/ul&gt;<br/>
    /// <br/>
    /// You may wish to use a client library (https://oauth.net/code/) to perform the next steps, using the configuration values above.<br/>
    /// <br/>
    /// ## 3. Initiate an OAuth2 request<br/>
    /// <br/>
    /// Construct the request url using the template below, replacing the &lt;strong&gt;&lt;code&gt;{scope}&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;{client_id}&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;{redirect_uri}&lt;/code&gt;&lt;/strong&gt; parameters with the configuration values accordingly.<br/>
    /// <br/>
    /// Additionally, generate a &lt;strong&gt;&lt;code&gt;state&lt;/code&gt;&lt;/strong&gt; parameter for the specific request, and a code challenge and verifier (used in a later step) for &lt;a href=&quot;https://oauth.net/2/pkce/&quot;&gt;Proof Key Code Exchange&lt;/a&gt;.<br/>
    /// <br/>
    ///   &lt;pre&gt;&lt;code&gt;https://auth.dailypay.com/oauth2/auth<br/>
    ///     ?response_type=code<br/>
    ///     &amp;scope={scope}<br/>
    ///     &amp;client_id={client_id}<br/>
    ///     &amp;redirect_uri={redirect_uri}<br/>
    ///     &amp;state={state}<br/>
    ///     &amp;code_challenge={code_challenge}<br/>
    ///     &amp;code_challenge_method=S256<br/>
    ///   &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    ///   &lt;details&gt;<br/>
    ///   &lt;summary&gt;Example&lt;/summary&gt;<br/>
    ///   <br/>
    ///   &lt;pre&gt;&lt;code&gt;https://auth.dailypay.com/oauth2/auth<br/>
    ///     ?response_type=code<br/>
    ///     &amp;scope=user%3aread_write%20openid<br/>
    ///     &amp;client_id=your-client-id<br/>
    ///     &amp;redirect_uri=https%3A%2F%2Fexample.com%2Fcallback<br/>
    ///     &amp;state=9876543fghijklm<br/>
    ///     &amp;code_challenge=hKpKupTM391pE10xfQiorMxXarRKAHRhTfH_xkGf7U4<br/>
    ///     &amp;code_challenge_method=S256<br/>
    ///   &lt;/code&gt;&lt;/pre&gt;<br/>
    ///   <br/>
    ///   Make sure to url-encode each parameter e.g. &lt;code&gt;user:read_write&lt;/code&gt; becomes &lt;code&gt;user%3aread_write&lt;/code&gt;<br/>
    ///   &lt;/details&gt;<br/>
    ///   &lt;br&gt;<br/>
    /// <br/>
    /// ## 4. Open a browser window, tab, or secure mobile view to the constructed URL.<br/>
    /// <br/>
    /// The user will be prompted to log in or create a new DailyPay account and will be prompted to allow your application to act on their behalf.<br/>
    /// <br/>
    /// &lt;img src=&quot;https://s3.amazonaws.com/dp-devportal-images/pngs/OAuthAllowFlow.png&quot;&gt;<br/>
    /// <br/>
    /// ## 5. Handle the code<br/>
    /// <br/>
    /// Users will be redirected in the open tab to your callback url with a `code` query parameter,<br/>
    /// or an `error` and `error_description` if the user did not consent to your application&apos;s request or otherwise encountered an error.<br/>
    /// You will also be returned the `state` parameter.<br/>
    /// <br/>
    /// ## 6. Exchange the code for an Access Token<br/>
    /// <br/>
    /// As also specified in our <a href="Authentication#operation/requestToken">token endpoint documentation</a>,<br/>
    /// send the following parameters www-form-encoded in the request body to https://auth.dailypay.com/oauth2/token.<br/>
    /// <br/>
    /// &lt;table&gt;<br/>
    /// &lt;thead&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;th&gt;Parameter&lt;/th&gt;<br/>
    /// &lt;th&gt;Required&lt;/th&gt;<br/>
    /// &lt;th&gt;Description&lt;/th&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;/thead&gt;<br/>
    /// &lt;tbody&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;grant_type&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Must be set to &lt;code&gt;authorization_code&lt;/code&gt;.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;client_id&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Your client id provided by DailyPay.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;code&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;The authorization code received from the authorization server.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;redirect_uri&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;MUST be the redirection URI used in the initial authorization request.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;client_secret&lt;/td&gt;<br/>
    /// &lt;td&gt;Varies&lt;/td&gt;<br/>
    /// &lt;td&gt;Your client secret, if provided by DailyPay.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;code_verifier&lt;/td&gt;<br/>
    /// &lt;td&gt;Varies&lt;/td&gt;<br/>
    /// &lt;td&gt;The PKCE verifier matching the code_challenge generated earlier.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;/tbody&gt;<br/>
    /// &lt;/table&gt;<br/>
    /// <br/>
    /// Example Request to the Token Endpoint<br/>
    /// <br/>
    /// &lt;pre&gt;&lt;code&gt;curl --request POST \<br/>
    ///     --url https://auth.dailypay.com/oauth2/token \<br/>
    ///     --header &apos;accept: application/vnd.api+json&apos;<br/>
    ///     --header &apos;content-type: application/x-www-form-urlencoded&apos; \<br/>
    ///     --data &quot;grant_type=authorization_code&quot; \<br/>
    ///     --data &quot;client_id={client_id}&quot; \<br/>
    ///     --data &quot;code={code}&quot; \<br/>
    ///     --data &quot;redirect_uri={redirect_uri}&quot; \<br/>
    ///     --data &quot;code_verifier={verifier}&quot;<br/>
    /// &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    /// The resulting access token can be used to make requests to the DailyPay Public REST API:<br/>
    /// <br/>
    /// &lt;pre&gt;&lt;code&gt;{<br/>
    ///     &quot;access_token&quot;: &quot;dpo_38347Ae178B4a16C7e42F292c6912E7710c8&quot;,<br/>
    ///     &quot;token_type&quot;: &quot;bearer&quot;,<br/>
    ///     &quot;expires_in&quot;: 3600,<br/>
    ///     &quot;created_at&quot;: 1669741580<br/>
    /// }<br/>
    /// &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    /// &gt; The authorization code, access token, and refresh tokens can vary in size but will typically remain under 4096 btyes.<br/>
    /// <br/>
    /// # Client Credentials Flow<br/>
    /// <br/>
    /// As also specified in our <a href="Authentication#operation/requestToken">token endpoint documentation</a>,<br/>
    /// send the following parameters www-form-encoded in the request body to https://auth.dailypay.com/oauth2/token.<br/>
    /// <br/>
    /// &lt;table&gt;<br/>
    /// &lt;thead&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;th&gt;Parameter&lt;/th&gt;<br/>
    /// &lt;th&gt;Required&lt;/th&gt;<br/>
    /// &lt;th&gt;Description&lt;/th&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;/thead&gt;<br/>
    /// &lt;tbody&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;grant_type&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Must be set to &lt;code&gt;client_credentials&lt;/code&gt;.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;scope&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;The space-delimited list of requested scopes&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;client_id&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Your client id provided by DailyPay.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;tr&gt;<br/>
    /// &lt;td&gt;client_secret&lt;/td&gt;<br/>
    /// &lt;td&gt;Yes&lt;/td&gt;<br/>
    /// &lt;td&gt;Your client secret provided by DailyPay.&lt;/td&gt;<br/>
    /// &lt;/tr&gt;<br/>
    /// &lt;/tbody&gt;<br/>
    /// &lt;/table&gt;<br/>
    /// <br/>
    /// Example Request to the Token Endpoint<br/>
    /// <br/>
    /// &lt;pre&gt;&lt;code&gt;curl --request POST \<br/>
    ///     --url https://auth.dailypay.com/oauth2/token \<br/>
    ///     --header &apos;accept: application/vnd.api+json&apos;<br/>
    ///     --header &apos;content-type: application/x-www-form-urlencoded&apos; \<br/>
    ///     --data &quot;grant_type=client_credentials&quot; \<br/>
    ///     --data &quot;scope={scopes}&quot; \<br/>
    ///     --data &quot;client_id={client_id}&quot; \<br/>
    ///     --data &quot;client_secret={client_secret}&quot;<br/>
    /// &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    /// The resulting access token can be used to make requests to the DailyPay Public REST API:<br/>
    /// <br/>
    /// &lt;pre&gt;&lt;code&gt;{<br/>
    ///     &quot;access_token&quot;: &quot;dpo_38347Ae178B4a16C7e42F292c6912E7710c8&quot;,<br/>
    ///     &quot;token_type&quot;: &quot;bearer&quot;,<br/>
    ///     &quot;expires_in&quot;: 3600,<br/>
    ///     &quot;created_at&quot;: 1669741580<br/>
    /// }<br/>
    /// &lt;/code&gt;&lt;/pre&gt;<br/>
    /// <br/>
    /// &gt; The authorization code, access token, and refresh tokens can vary in size but will typically remain under 4096 btyes.<br/>
    /// <br/>
    /// ---<br/>
    /// 
    /// </remarks>
    /// </summary>
    public class Authentication: IAuthentication
    {
        /// <summary>
        /// List of server URLs available for the requestToken operation.
        /// </summary>
        public static readonly string[] RequestTokenServerList = {
            "https://auth.dailypay.com",
            "https://auth.uat.dailypay.com",
        };
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.1.2";
        private const string _sdkGenVersion = "2.638.0";
        private const string _openapiDocVersion = "3.0.0-beta01";

        public Authentication(SDKConfig config)
        {
            SDKConfiguration = config;
        }

        public async Task<RequestTokenResponse> RequestTokenAsync(RequestTokenRequest request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(RequestTokenServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/oauth2/token";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", SDKConfiguration.UserAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "form", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var hookCtx = new HookContext(SDKConfiguration, baseUrl, "requestToken", new List<string> { "client:admin" }, null);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await SDKConfiguration.Client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<TokenData>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new RequestTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.TokenData = obj;
                    return response;
                }

                throw new Models.Errors.APIException("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 400)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<BadRequestException>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    obj!.HttpMeta = new Models.Components.HTTPMetadata()
                    {
                        Response = httpResponse,
                        Request = httpRequest
                    };
                    throw obj!;
                }

                throw new Models.Errors.APIException("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/vnd.api+json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ErrorUnexpected>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.APIException("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.APIException("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.APIException("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.APIException("Unknown status code received", httpRequest, httpResponse);
        }
    }
}