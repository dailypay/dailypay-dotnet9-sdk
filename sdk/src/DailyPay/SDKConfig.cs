//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DailyPay
{
    using DailyPay.Hooks;
    using DailyPay.Models.Components;
    using DailyPay.Utils;
    using DailyPay.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public struct SDKConfig
    {
        /// <summary>
        /// List of server URLs available to the SDK.
        /// </summary>
        public static readonly string[] ServerList = {
            "https://api.{environment}.com",
        };

        public ISpeakeasyHttpClient Client;
        public string ServerUrl;
        public int ServerIndex;
        public List<Dictionary<string, string>> ServerVariables;
        public long? Version;
        public string UserAgent;
        public Func<DailyPay.Models.Components.Security>? SecuritySource;
        public SDKHooks Hooks;
        public RetryConfig? RetryConfig;

        /// <summary>
        /// Initializes a new instance of the SDKConfig struct with default values.
        /// </summary>
        public SDKConfig(ISpeakeasyHttpClient? client = null)
        {
            Client = client ?? new SpeakeasyHttpClient();
            ServerUrl = "";
            ServerIndex = 0;
            ServerVariables = new List<Dictionary<string, string>>()
            {
                new Dictionary<string, string>()
                {
                    {"environment", "dailypay"},
                },
            };
            Version = null;
            UserAgent = "speakeasy-sdk/csharp 0.1.2 2.638.0 3.0.0-beta01 DailyPay";
            SecuritySource = null;
            Hooks = new SDKHooks();
            RetryConfig = null;
        }

        public void SetServerVariable(string key, string value)
        {
            foreach (var serverVariables in this.ServerVariables.Where(dict => dict.ContainsKey(key)))
            {
                serverVariables[key] = value;
            }
        }

        public string GetTemplatedServerUrl()
        {
            if (!String.IsNullOrEmpty(this.ServerUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.ServerUrl, "/"), new Dictionary<string, string>());
            }
            return Utilities.TemplateUrl(SDKConfig.ServerList[this.ServerIndex], this.ServerVariables[this.ServerIndex]);
        }
    }
}