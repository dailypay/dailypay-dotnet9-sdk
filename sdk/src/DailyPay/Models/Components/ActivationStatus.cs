//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DailyPay.Models.Components
{
    using DailyPay.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Activation is the process of verifying that data is available for a Job,  and that a person has verified their identity as the Person associated with the Job. Only paychecks from Jobs with `activated` status will contribute to an earnings balance account.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// To deactivate a job, update activation_status to `DEACTIVATED`.<br/>
    /// 
    /// </remarks>
    /// </summary>
    public enum ActivationStatus
    {
        [JsonProperty("DEACTIVATED")]
        Deactivated,
        [JsonProperty("DEACTIVATION_PENDING")]
        DeactivationPending,
        [JsonProperty("ACTIVATION_REQUIRED")]
        ActivationRequired,
        [JsonProperty("ACTIVATION_UNDER_REVIEW")]
        ActivationUnderReview,
        [JsonProperty("ACTIVATED")]
        Activated,
    }

    public static class ActivationStatusExtension
    {
        public static string Value(this ActivationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ActivationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(ActivationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ActivationStatus)
                    {
                        return (ActivationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ActivationStatus");
        }
    }

}