//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Components
{
    using Newtonsoft.Json;
    using Openapi.Models.Components;
    using Openapi.Utils;
    using System;
    
    public class PaycheckAttributes
    {

        /// <summary>
        /// A paycheck expected for an open pay period will have the status ESTIMATED. At the end of the pay period, the paycheck will begin PROCESSING. When it is sent, it will become IN_TRANSIT. Finally, once deposited in an account it will have the status DEPOSITED.
        /// </summary>
        [JsonProperty("status")]
        public PaycheckAttributesStatus Status { get; set; } = default!;

        /// <summary>
        /// An ISO 8601 timestamp denoting the ending day of a paycheck&apos;s pay period. For example, a pay period that ends during the day of March 15 will have a value of 2023-03-15T04:00:00Z.
        /// </summary>
        [JsonProperty("pay_period_ends_at")]
        public DateTime PayPeriodEndsAt { get; set; } = default!;

        /// <summary>
        /// An ISO 8601 timestamp denoting the first day of a paycheck&apos;s pay period. For example, a pay period that starts during the day of March 15 will have a value of 2023-03-15T04:00:00Z.
        /// </summary>
        [JsonProperty("pay_period_starts_at")]
        public DateTime PayPeriodStartsAt { get; set; } = default!;

        /// <summary>
        /// An ISO 8601 timestamp denoting the day the paycheck is scheduled to be delivered.
        /// </summary>
        [JsonProperty("deposit_expected_at")]
        public DateTime DepositExpectedAt { get; set; } = default!;

        /// <summary>
        /// The amount debited and settled from this paycheck prior to the end of the pay period. Debits are settled during a pay period in order to cover withdrawals from an earnings balance account. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { total_debited: 7050 } with currency USD resolves to $70.50.
        /// </summary>
        [JsonProperty("total_debited", NullValueHandling = NullValueHandling.Include)]
        public long? TotalDebited { get; set; }

        /// <summary>
        /// The total earnings for this paycheck before any deductions are applied. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { gross_earnings: 55370 } with currency USD resolves to $553.70
        /// </summary>
        [JsonProperty("gross_earnings")]
        public long GrossEarnings { get; set; } = default!;

        /// <summary>
        /// The amount withheld from this paycheck by the employer, usually for taxes. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { withholdings: 5000 } with currency USD resolves to $50.00.
        /// </summary>
        [JsonProperty("employer_withholdings", NullValueHandling = NullValueHandling.Include)]
        public long? EmployerWithholdings { get; set; }

        /// <summary>
        /// The net earnings for the paycheck once settled given in a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { earnings: 50370 } with currency USD resolves to $503.70.
        /// </summary>
        [JsonProperty("net_earnings", NullValueHandling = NullValueHandling.Include)]
        public long? NetEarnings { get; set; }

        /// <summary>
        /// A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
        /// </summary>
        [JsonProperty("currency")]
        public string Currency { get; set; } = default!;
    }
}