//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi
{
    using Newtonsoft.Json;
    using Openapi.Hooks;
    using Openapi.Models.Components;
    using Openapi.Models.Errors;
    using Openapi.Models.Requests;
    using Openapi.Utils;
    using Openapi.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    /// <summary>
    /// ## What is the Payments API?<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// The Payments API is a PCI compliant endpoint and allows for secure debit card token creation. These tokens are used within DailyPay&apos;s APIs. When a tokenized debit card is added to a user‚Äôs account they can begin to take instant transfers.<br/>
    /// <br/>
    /// **How does this work?** A user&apos;s debit card data is sent via POST request to the Payments API. The debit card data is encrypted and tokenized before being returned. This tokenized card data is used for instant transfers via the Extend API.<br/>
    /// <br/>
    /// ### What is PCI compliance?<br/>
    /// <br/>
    /// It‚Äôs how we keep card data secure. DailyPay has a responsibility and legal requirement to protect debit card data therefore the Payments API endpoint complies with the Payment Card Industry Data Security Standards <a href="https://www.pcisecuritystandards.org/">PCI DSS</a>.<br/>
    /// <br/>
    /// &gt; üìò **Info**<br/>
    /// &gt; DailyPay only handles card data during encryption and tokenization<br/>
    /// &gt; **The Payments server is DailyPay‚Äôs only PCI compliant API.**<br/>
    /// <br/>
    /// ## Create a Debit Card Token<br/>
    /// <br/>
    /// Steps to create a tokenized debit card for use within DailyPay&apos;s APIs.<br/>
    /// <br/>
    /// ### 1. POST debit card data to the Payments API<br/>
    /// <br/>
    /// After you have securely collected the debit card data for a user, create a POST to the PCI compliant payments endpoint <a href="/v2/tag/Card-Creation">`POST Generic Card`</a> with the following required parameters in this example.<br/>
    /// <br/>
    /// ```json<br/>
    /// {<br/>
    ///   &quot;first_name&quot;: &quot;Edith&quot;,<br/>
    ///   &quot;last_name&quot;: &quot;Clarke&quot;,<br/>
    ///   &quot;card_number&quot;: &quot;4007589999999912&quot;,<br/>
    ///   &quot;expiration_year&quot;: &quot;2027&quot;,<br/>
    ///   &quot;expiration_month&quot;: &quot;02&quot;,<br/>
    ///   &quot;cvv&quot;: &quot;123&quot;,<br/>
    ///   &quot;address_line_one&quot;: &quot;1234 Street&quot;,<br/>
    ///   &quot;address_city&quot;: &quot;Fort Lee&quot;,<br/>
    ///   &quot;address_state&quot;: &quot;NJ&quot;,<br/>
    ///   &quot;address_zip_code&quot;: &quot;07237&quot;,<br/>
    ///   &quot;address_country&quot;: &quot;US&quot;<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// ### 2. Receive and handle the tokenized card data<br/>
    /// <br/>
    /// The <a href="https://developer.dailypay.com/v2/reference/post_cards-generic">payments endpoint</a> returns an opaque string representing the card details. This token is encrypted and complies with PCI DSS. You will need the token for step 3, after which it can be discarded. The token is a long string and will look similar to below:<br/>
    /// <br/>
    /// ```json<br/>
    /// {&quot;token&quot;:&quot;eyJhbGciOiJSU0Et.....T0FFU‚Äù}<br/>
    /// ```<br/>
    /// <br/>
    /// ### 3. POST the token to the Extend API<br/>
    /// <br/>
    /// &gt; üìò **Important** &gt; <a href="/v2/tag/Authorization">Proper authorization</a> is required to create a transfer account.<br/>
    /// <br/>
    /// Send the encrypted token in a POST request to the <a href="/v2/tag/Users#operation/createTransferAccount">transfer accounts endpoint</a> as the value for the `generic_token` field. This will create a transfer account and allow a user to start taking transfers.<br/>
    /// 
    /// </remarks>
    /// </summary>
    public interface ICards
    {

        /// <summary>
        /// Obtain a card token
        /// 
        /// <remarks>
        /// Obtain a PCI DSS Compliant card token. This token must be used in order to add a card to a user‚Äôs DailyPay account.
        /// </remarks>
        /// </summary>
        Task<CreateGenericCardTokenResponse> CreateAsync(CreateGenericCardTokenRequest request, string? serverUrl = null);
    }

    /// <summary>
    /// ## What is the Payments API?<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// The Payments API is a PCI compliant endpoint and allows for secure debit card token creation. These tokens are used within DailyPay&apos;s APIs. When a tokenized debit card is added to a user‚Äôs account they can begin to take instant transfers.<br/>
    /// <br/>
    /// **How does this work?** A user&apos;s debit card data is sent via POST request to the Payments API. The debit card data is encrypted and tokenized before being returned. This tokenized card data is used for instant transfers via the Extend API.<br/>
    /// <br/>
    /// ### What is PCI compliance?<br/>
    /// <br/>
    /// It‚Äôs how we keep card data secure. DailyPay has a responsibility and legal requirement to protect debit card data therefore the Payments API endpoint complies with the Payment Card Industry Data Security Standards <a href="https://www.pcisecuritystandards.org/">PCI DSS</a>.<br/>
    /// <br/>
    /// &gt; üìò **Info**<br/>
    /// &gt; DailyPay only handles card data during encryption and tokenization<br/>
    /// &gt; **The Payments server is DailyPay‚Äôs only PCI compliant API.**<br/>
    /// <br/>
    /// ## Create a Debit Card Token<br/>
    /// <br/>
    /// Steps to create a tokenized debit card for use within DailyPay&apos;s APIs.<br/>
    /// <br/>
    /// ### 1. POST debit card data to the Payments API<br/>
    /// <br/>
    /// After you have securely collected the debit card data for a user, create a POST to the PCI compliant payments endpoint <a href="/v2/tag/Card-Creation">`POST Generic Card`</a> with the following required parameters in this example.<br/>
    /// <br/>
    /// ```json<br/>
    /// {<br/>
    ///   &quot;first_name&quot;: &quot;Edith&quot;,<br/>
    ///   &quot;last_name&quot;: &quot;Clarke&quot;,<br/>
    ///   &quot;card_number&quot;: &quot;4007589999999912&quot;,<br/>
    ///   &quot;expiration_year&quot;: &quot;2027&quot;,<br/>
    ///   &quot;expiration_month&quot;: &quot;02&quot;,<br/>
    ///   &quot;cvv&quot;: &quot;123&quot;,<br/>
    ///   &quot;address_line_one&quot;: &quot;1234 Street&quot;,<br/>
    ///   &quot;address_city&quot;: &quot;Fort Lee&quot;,<br/>
    ///   &quot;address_state&quot;: &quot;NJ&quot;,<br/>
    ///   &quot;address_zip_code&quot;: &quot;07237&quot;,<br/>
    ///   &quot;address_country&quot;: &quot;US&quot;<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// ### 2. Receive and handle the tokenized card data<br/>
    /// <br/>
    /// The <a href="https://developer.dailypay.com/v2/reference/post_cards-generic">payments endpoint</a> returns an opaque string representing the card details. This token is encrypted and complies with PCI DSS. You will need the token for step 3, after which it can be discarded. The token is a long string and will look similar to below:<br/>
    /// <br/>
    /// ```json<br/>
    /// {&quot;token&quot;:&quot;eyJhbGciOiJSU0Et.....T0FFU‚Äù}<br/>
    /// ```<br/>
    /// <br/>
    /// ### 3. POST the token to the Extend API<br/>
    /// <br/>
    /// &gt; üìò **Important** &gt; <a href="/v2/tag/Authorization">Proper authorization</a> is required to create a transfer account.<br/>
    /// <br/>
    /// Send the encrypted token in a POST request to the <a href="/v2/tag/Users#operation/createTransferAccount">transfer accounts endpoint</a> as the value for the `generic_token` field. This will create a transfer account and allow a user to start taking transfers.<br/>
    /// 
    /// </remarks>
    /// </summary>
    public class Cards: ICards
    {
        /// <summary>
        /// List of server URLs available for the createGenericCardToken operation.
        /// </summary>
        public static readonly string[] CreateGenericCardTokenServerList = {
            "https://payments.dailypay.com/v2",
        };
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.1";
        private const string _sdkGenVersion = "2.598.22";
        private const string _openapiDocVersion = "3.0.0-beta01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.0.1 2.598.22 3.0.0-beta01 Openapi";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Openapi.Models.Components.Security>? _securitySource;

        public Cards(ISpeakeasyHttpClient client, Func<Openapi.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateGenericCardTokenResponse> CreateAsync(CreateGenericCardTokenRequest request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(CreateGenericCardTokenServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/cards/generic";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var hookCtx = new HookContext(baseUrl, "createGenericCardToken", new List<string> { "client:admin" }, null);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await _client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<CreateGenericCardTokenResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateGenericCardTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.APIException("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.APIException("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500 || responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.APIException("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.APIException("Unknown status code received", httpRequest, httpResponse);
        }
    }
}