//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DailyPay.SDK.DotNet9
{
    using DailyPay.SDK.DotNet9.Hooks;
    using DailyPay.SDK.DotNet9.Models.Components;
    using DailyPay.SDK.DotNet9.Models.Errors;
    using DailyPay.SDK.DotNet9.Utils;
    using DailyPay.SDK.DotNet9.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;


    public enum ServerEnvironment
    {
        [JsonProperty("dailypay")]
        Dailypay,
        [JsonProperty("dailypayuat")]
        Dailypayuat,
    }

    public static class ServerEnvironmentExtension
    {
        public static string Value(this ServerEnvironment value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ServerEnvironment ToEnum(this string value)
        {
            foreach(var field in typeof(ServerEnvironment).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ServerEnvironment)
                    {
                        return (ServerEnvironment)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ServerEnvironment");
        }
    }

    /// <summary>
    /// DailyPay Public Rest API: # Welcome<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// This site contains information on basic DailyPay concepts and instructions for using the endpoints of each API. We are just now getting started with our public documentation - please let us know if you have any feedback or questions via Suggested Edits, where you can suggest changes to the documentation directly from the portal.<br/>
    /// <br/>
    /// Here are some links to help you get familiar with the DailyPay basics:<br/>
    /// <br/>
    /// <a href="/tag/Getting-Started#section/DailyPay&apos;s-API-Versioning">API Versioning</a> — Find out how we version our APIs.  <br/>
    /// <a href="/tag/Getting-Started#section/Environments">Environments</a> — Get an overview of the different environments in the DailyPay API.  <br/>
    /// <a href="/tag/Glossary">Glossary</a> — Explore a list of terms used in the DailyPay API.<br/>
    /// 
    /// </remarks>
    /// </summary>
    public interface ISDK
    {

        /// <summary>
        /// The _jobs_ endpoint provides access to comprehensive information <br/>
        /// 
        /// <remarks>
        /// about a person&apos;s employment. It enables you to retrieve details about<br/>
        /// individual jobs, including information about the organization<br/>
        /// they work for, status, wage rate, job title, location,<br/>
        /// paycheck settings, and related links to associated accounts.<br/>
        /// 
        /// </remarks>
        /// </summary>
        public IJobs Jobs { get; }

        /// <summary>
        /// The _accounts_ endpoint provides comprehensive information about money<br/>
        /// 
        /// <remarks>
        /// accounts. You can retrieve account details, including the<br/>
        /// account&apos;s unique ID, a link to the account holder, type, subtype,<br/>
        /// verification status, balance details, transfer capabilities, and<br/>
        /// user-specific information such as names, routing numbers, and partial<br/>
        /// account numbers.<br/>
        /// <br/>
        /// <br/>
        /// **Functionality:** Access detailed user account information, verify<br/>
        /// account balances, view transfer capabilities, and access user-specific<br/>
        /// details associated with each account.<br/>
        /// 
        /// </remarks>
        /// </summary>
        public IAccounts Accounts { get; }

        /// <summary>
        /// The _transfers_ endpoint allows you to initiate and track money movement.  You can access transfer details, including the transfer&apos;s unique ID, amount, currency, status, schedule, submission and resolution times, fees, and related links to the involved parties.<br/>
        /// 
        /// <remarks>
        /// <br/>
        /// **Functionality** Retrieve transfer information, monitor transfer statuses, view transfer schedules, and access relevant links for the source, destination, and origin of the transfer.<br/>
        /// <br/>
        /// **Important** - Account origin: a user initiated movement of money from one account to another - Paycheck origin: an automatic (system-generated) movement of money as part of payroll<br/>
        /// 
        /// </remarks>
        /// </summary>
        public ITransfers Transfers { get; }

        /// <summary>
        /// The _paychecks_ endpoint provides detailed information about paychecks. <br/>
        /// 
        /// <remarks>
        /// You can retrieve individual paycheck details, including the<br/>
        /// person and job associated with the paycheck, its status, pay period,<br/>
        /// expected deposit date, total debited amount, withholdings, earnings, and<br/>
        /// currency.<br/>
        /// <br/>
        /// **Functionality:** Retrieve specific paycheck details, including payee and<br/>
        /// job information, and monitor the status and financial details of each<br/>
        /// paycheck.<br/>
        /// 
        /// </remarks>
        /// </summary>
        public IPaychecks Paychecks { get; }

        /// <summary>
        /// The _organizations_ endpoint provides details about a business entity, <br/>
        /// 
        /// <remarks>
        /// such as an employer, or a group of people, such as a division.<br/>
        /// <br/>
        /// The response includes the organization name and ID which can be used to<br/>
        /// make subsequent endpoint calls related to the organization and its<br/>
        /// employees.<br/>
        /// 
        /// </remarks>
        /// </summary>
        public IOrganizations Organizations { get; }

        /// <summary>
        /// The _people_ endpoint allows you to see information related to who owns <br/>
        /// 
        /// <remarks>
        /// resources such as jobs and accounts.<br/>
        /// <br/>
        /// **Functionality:** Retrieve limited details about a person, including<br/>
        /// their name, global status, and state of residence.<br/>
        /// 
        /// </remarks>
        /// </summary>
        public IPeople People { get; }

        /// <summary>
        /// ## What is the Payments API?<br/>
        /// 
        /// <remarks>
        /// <br/>
        /// The Payments API is a PCI compliant endpoint and allows for secure debit card token creation. These tokens are used within DailyPay&apos;s APIs. When a tokenized debit card is added to a user’s account they can begin to take instant transfers.<br/>
        /// <br/>
        /// **How does this work?** A user&apos;s debit card data is sent via POST request to the Payments API. The debit card data is encrypted and tokenized before being returned. This tokenized card data is used for instant transfers via the Extend API.<br/>
        /// <br/>
        /// ### What is PCI compliance?<br/>
        /// <br/>
        /// It’s how we keep card data secure. DailyPay has a responsibility and legal requirement to protect debit card data therefore the Payments API endpoint complies with the Payment Card Industry Data Security Standards <a href="https://www.pcisecuritystandards.org/">PCI DSS</a>.<br/>
        /// <br/>
        /// &gt; 📘 **Info**<br/>
        /// &gt; DailyPay only handles card data during encryption and tokenization<br/>
        /// &gt; **The Payments server is DailyPay’s only PCI compliant API.**<br/>
        /// <br/>
        /// ## Create a Debit Card Token<br/>
        /// <br/>
        /// Steps to create a tokenized debit card for use within DailyPay&apos;s APIs.<br/>
        /// <br/>
        /// ### 1. POST debit card data to the Payments API<br/>
        /// <br/>
        /// After you have securely collected the debit card data for a user, create a POST to the PCI compliant payments endpoint <a href="/v2/tag/Card-Creation">`POST Generic Card`</a> with the following required parameters in this example.<br/>
        /// <br/>
        /// ```json<br/>
        /// {<br/>
        ///   &quot;first_name&quot;: &quot;Edith&quot;,<br/>
        ///   &quot;last_name&quot;: &quot;Clarke&quot;,<br/>
        ///   &quot;card_number&quot;: &quot;4007589999999912&quot;,<br/>
        ///   &quot;expiration_year&quot;: &quot;2027&quot;,<br/>
        ///   &quot;expiration_month&quot;: &quot;02&quot;,<br/>
        ///   &quot;cvv&quot;: &quot;123&quot;,<br/>
        ///   &quot;address_line_one&quot;: &quot;1234 Street&quot;,<br/>
        ///   &quot;address_city&quot;: &quot;Fort Lee&quot;,<br/>
        ///   &quot;address_state&quot;: &quot;NJ&quot;,<br/>
        ///   &quot;address_zip_code&quot;: &quot;07237&quot;,<br/>
        ///   &quot;address_country&quot;: &quot;US&quot;<br/>
        /// }<br/>
        /// ```<br/>
        /// <br/>
        /// ### 2. Receive and handle the tokenized card data<br/>
        /// <br/>
        /// The <a href="https://developer.dailypay.com/v2/reference/post_cards-generic">payments endpoint</a> returns an opaque string representing the card details. This token is encrypted and complies with PCI DSS. You will need the token for step 3, after which it can be discarded. The token is a long string and will look similar to below:<br/>
        /// <br/>
        /// ```json<br/>
        /// {&quot;token&quot;:&quot;eyJhbGciOiJSU0Et.....T0FFU”}<br/>
        /// ```<br/>
        /// <br/>
        /// ### 3. POST the token to the Extend API<br/>
        /// <br/>
        /// &gt; 📘 **Important** &gt; <a href="/v2/tag/Authorization">Proper authorization</a> is required to create a transfer account.<br/>
        /// <br/>
        /// Send the encrypted token in a POST request to the <a href="/v2/tag/Users#operation/createTransferAccount">transfer accounts endpoint</a> as the value for the `generic_token` field. This will create a transfer account and allow a user to start taking transfers.<br/>
        /// 
        /// </remarks>
        /// </summary>
        public ICards Cards { get; }

        /// <summary>
        /// The _health_ endpoint provides a simple health check for the API. <br/>
        /// 
        /// <remarks>
        /// <br/>
        /// **Functionality:** Check the status of the API to ensure it is functioning<br/>
        /// correctly.<br/>
        /// 
        /// </remarks>
        /// </summary>
        public IHealth Health { get; }
    }


    /// <summary>
    /// DailyPay Public Rest API: # Welcome<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// This site contains information on basic DailyPay concepts and instructions for using the endpoints of each API. We are just now getting started with our public documentation - please let us know if you have any feedback or questions via Suggested Edits, where you can suggest changes to the documentation directly from the portal.<br/>
    /// <br/>
    /// Here are some links to help you get familiar with the DailyPay basics:<br/>
    /// <br/>
    /// <a href="/tag/Getting-Started#section/DailyPay&apos;s-API-Versioning">API Versioning</a> — Find out how we version our APIs.  <br/>
    /// <a href="/tag/Getting-Started#section/Environments">Environments</a> — Get an overview of the different environments in the DailyPay API.  <br/>
    /// <a href="/tag/Glossary">Glossary</a> — Explore a list of terms used in the DailyPay API.<br/>
    /// 
    /// </remarks>
    /// </summary>
    public class SDK: ISDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.3.1";
        private const string _sdkGenVersion = "2.698.4";
        private const string _openapiDocVersion = "3.0.0-beta01";
        public IJobs Jobs { get; private set; }
        public IAccounts Accounts { get; private set; }
        public ITransfers Transfers { get; private set; }
        public IPaychecks Paychecks { get; private set; }
        public IOrganizations Organizations { get; private set; }
        public IPeople People { get; private set; }
        public ICards Cards { get; private set; }
        public IHealth Health { get; private set; }

        public SDK(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            Jobs = new Jobs(SDKConfiguration);

            Accounts = new Accounts(SDKConfiguration);

            Transfers = new Transfers(SDKConfiguration);

            Paychecks = new Paychecks(SDKConfiguration);

            Organizations = new Organizations(SDKConfiguration);

            People = new People(SDKConfiguration);

            Cards = new Cards(SDKConfiguration);

            Health = new Health(SDKConfiguration);
        }

        public SDK(DailyPay.SDK.DotNet9.Models.Components.Security? security = null, Func<DailyPay.SDK.DotNet9.Models.Components.Security>? securitySource = null, long? version = null, int? serverIndex = null, ServerEnvironment? environment = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<DailyPay.SDK.DotNet9.Models.Components.Security>? _securitySource = null;

            if(securitySource != null)
            {
                _securitySource = securitySource;
            }
            else if(security != null)
            {
                _securitySource = () => security;
            }

            SDKConfiguration = new SDKConfig(client)
            {
                Version = version,
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            if (environment != null)
            {
                SDKConfiguration.SetServerVariable("environment", ServerEnvironmentExtension.Value(environment.Value));
            }

            InitHooks();

            Jobs = new Jobs(SDKConfiguration);

            Accounts = new Accounts(SDKConfiguration);

            Transfers = new Transfers(SDKConfiguration);

            Paychecks = new Paychecks(SDKConfiguration);

            Organizations = new Organizations(SDKConfiguration);

            People = new People(SDKConfiguration);

            Cards = new Cards(SDKConfiguration);

            Health = new Health(SDKConfiguration);
        }

        private void InitHooks()
        {
            SDKConfiguration = SDKConfiguration.Hooks.SDKInit(SDKConfiguration);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithEnvironment(ServerEnvironment environment)
            {
                _sdkConfig.SetServerVariable("environment", ServerEnvironmentExtension.Value(environment));
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithVersion(long version)
            {
                _sdkConfig.Version = version;
                return this;
            }

            public SDKBuilder WithSecuritySource(Func<DailyPay.SDK.DotNet9.Models.Components.Security> securitySource)
            {
                _sdkConfig.SecuritySource = securitySource;
                return this;
            }

            public SDKBuilder WithSecurity(DailyPay.SDK.DotNet9.Models.Components.Security security)
            {
                _sdkConfig.SecuritySource = () => security;
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public SDK Build()
            {
              return new SDK(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}