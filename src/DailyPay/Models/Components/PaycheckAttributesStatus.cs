//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DailyPay.Models.Components
{
    using DailyPay.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// A paycheck expected for an open pay period will have the status ESTIMATED. At the end of the pay period, the paycheck will begin PROCESSING. When it is sent, it will become IN_TRANSIT. Finally, once deposited in an account it will have the status DEPOSITED.
    /// </summary>
    public enum PaycheckAttributesStatus
    {
        [JsonProperty("ESTIMATED")]
        Estimated,
        [JsonProperty("PROCESSING")]
        Processing,
        [JsonProperty("IN_TRANSIT")]
        InTransit,
        [JsonProperty("DEPOSITED")]
        Deposited,
    }

    public static class PaycheckAttributesStatusExtension
    {
        public static string Value(this PaycheckAttributesStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static PaycheckAttributesStatus ToEnum(this string value)
        {
            foreach(var field in typeof(PaycheckAttributesStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is PaycheckAttributesStatus)
                    {
                        return (PaycheckAttributesStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum PaycheckAttributesStatus");
        }
    }

}