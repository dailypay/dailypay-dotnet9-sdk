//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DailyPay.Models.Components
{
    using DailyPay.Models.Components;
    using DailyPay.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class OriginType
    {
        private OriginType(string value) { Value = value; }

        public string Value { get; private set; }
        public static OriginType AccountRelationship { get { return new OriginType("AccountRelationship"); } }
        
        public static OriginType PaycheckRelationship { get { return new OriginType("PaycheckRelationship"); } }
        
        public static OriginType Null { get { return new OriginType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(OriginType v) { return v.Value; }
        public static OriginType FromString(string v) {
            switch(v) {
                case "AccountRelationship": return AccountRelationship;
                case "PaycheckRelationship": return PaycheckRelationship;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for OriginType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((OriginType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Origin may be a reference to either a Paycheck or an Account.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// User-created transfers always originate from an Account with `account_type` `EARNINGS_BALANCE`.<br/>
    /// <br/>
    /// A transfer that originates from a Paycheck is a  <br/>
    /// system-created record that describes a credit of earnings to an account with `account_type` `EARNINGS_BALANCE`.<br/>
    /// 
    /// </remarks>
    /// </summary>
    [JsonConverter(typeof(Origin.OriginConverter))]
    public class Origin {
        public Origin(OriginType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public AccountRelationship? AccountRelationship { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public PaycheckRelationship? PaycheckRelationship { get; set; }

        public OriginType Type { get; set; }


        public static Origin CreateAccountRelationship(AccountRelationship accountRelationship) {
            OriginType typ = OriginType.AccountRelationship;

            Origin res = new Origin(typ);
            res.AccountRelationship = accountRelationship;
            return res;
        }

        public static Origin CreatePaycheckRelationship(PaycheckRelationship paycheckRelationship) {
            OriginType typ = OriginType.PaycheckRelationship;

            Origin res = new Origin(typ);
            res.PaycheckRelationship = paycheckRelationship;
            return res;
        }

        public static Origin CreateNull() {
            OriginType typ = OriginType.Null;
            return new Origin(typ);
        }

        public class OriginConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Origin);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Origin(OriginType.AccountRelationship)
                    {
                        AccountRelationship = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<AccountRelationship>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(AccountRelationship), new Origin(OriginType.AccountRelationship), "AccountRelationship"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Origin(OriginType.PaycheckRelationship)
                    {
                        PaycheckRelationship = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<PaycheckRelationship>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(PaycheckRelationship), new Origin(OriginType.PaycheckRelationship), "PaycheckRelationship"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Origin res = (Origin)value;
                if (OriginType.FromString(res.Type).Equals(OriginType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.AccountRelationship != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.AccountRelationship));
                    return;
                }
                if (res.PaycheckRelationship != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaycheckRelationship));
                    return;
                }

            }

        }

    }
}