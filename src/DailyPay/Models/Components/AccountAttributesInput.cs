//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DailyPay.Models.Components
{
    using DailyPay.Models.Components;
    using DailyPay.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class AccountAttributesInputType
    {
        private AccountAttributesInputType(string value) { Value = value; }

        public string Value { get; private set; }
        public static AccountAttributesInputType CardInput { get { return new AccountAttributesInputType("Card_input"); } }
        
        public static AccountAttributesInputType EarningsBalanceReadOnlyInput { get { return new AccountAttributesInputType("Earnings Balance (read only)_input"); } }
        
        public static AccountAttributesInputType DepositoryInput { get { return new AccountAttributesInputType("Depository_input"); } }
        
        public static AccountAttributesInputType Null { get { return new AccountAttributesInputType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(AccountAttributesInputType v) { return v.Value; }
        public static AccountAttributesInputType FromString(string v) {
            switch(v) {
                case "Card_input": return CardInput;
                case "Earnings Balance (read only)_input": return EarningsBalanceReadOnlyInput;
                case "Depository_input": return DepositoryInput;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for AccountAttributesInputType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((AccountAttributesInputType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// The details of the account.
    /// </summary>
    [JsonConverter(typeof(AccountAttributesInput.AccountAttributesInputConverter))]
    public class AccountAttributesInput {
        public AccountAttributesInput(AccountAttributesInputType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public CardInput? CardInput { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public EarningsBalanceReadOnlyInput? EarningsBalanceReadOnlyInput { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public DepositoryInput? DepositoryInput { get; set; }

        public AccountAttributesInputType Type { get; set; }


        public static AccountAttributesInput CreateCardInput(CardInput cardInput) {
            AccountAttributesInputType typ = AccountAttributesInputType.CardInput;

            AccountAttributesInput res = new AccountAttributesInput(typ);
            res.CardInput = cardInput;
            return res;
        }

        public static AccountAttributesInput CreateEarningsBalanceReadOnlyInput(EarningsBalanceReadOnlyInput earningsBalanceReadOnlyInput) {
            AccountAttributesInputType typ = AccountAttributesInputType.EarningsBalanceReadOnlyInput;

            AccountAttributesInput res = new AccountAttributesInput(typ);
            res.EarningsBalanceReadOnlyInput = earningsBalanceReadOnlyInput;
            return res;
        }

        public static AccountAttributesInput CreateDepositoryInput(DepositoryInput depositoryInput) {
            AccountAttributesInputType typ = AccountAttributesInputType.DepositoryInput;

            AccountAttributesInput res = new AccountAttributesInput(typ);
            res.DepositoryInput = depositoryInput;
            return res;
        }

        public static AccountAttributesInput CreateNull() {
            AccountAttributesInputType typ = AccountAttributesInputType.Null;
            return new AccountAttributesInput(typ);
        }

        public class AccountAttributesInputConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(AccountAttributesInput);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new AccountAttributesInput(AccountAttributesInputType.EarningsBalanceReadOnlyInput)
                    {
                        EarningsBalanceReadOnlyInput = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<EarningsBalanceReadOnlyInput>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(EarningsBalanceReadOnlyInput), new AccountAttributesInput(AccountAttributesInputType.EarningsBalanceReadOnlyInput), "EarningsBalanceReadOnlyInput"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new AccountAttributesInput(AccountAttributesInputType.CardInput)
                    {
                        CardInput = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<CardInput>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(CardInput), new AccountAttributesInput(AccountAttributesInputType.CardInput), "CardInput"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new AccountAttributesInput(AccountAttributesInputType.DepositoryInput)
                    {
                        DepositoryInput = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DepositoryInput>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DepositoryInput), new AccountAttributesInput(AccountAttributesInputType.DepositoryInput), "DepositoryInput"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                AccountAttributesInput res = (AccountAttributesInput)value;
                if (AccountAttributesInputType.FromString(res.Type).Equals(AccountAttributesInputType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.CardInput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.CardInput));
                    return;
                }
                if (res.EarningsBalanceReadOnlyInput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.EarningsBalanceReadOnlyInput));
                    return;
                }
                if (res.DepositoryInput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DepositoryInput));
                    return;
                }

            }

        }

    }
}